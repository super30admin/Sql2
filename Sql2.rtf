{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Problem 1 Rank Scores\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0\fs26 \cf0 #Solution 1\
select score, dense_rank() over(order by score desc )  as 'rank' from Scores\
order by 'rank' \
\
#Solution 2\
# select s1.score, count(distinct s2.score) as 'rank'\
# from Scores s1 inner join\
#  Scores s2 on  s1.score <= s2.score \
# group by s1.id, s1.score order by score desc\
\
\
# Solution 3\
# select  s1.score , (select count(distinct(s2.score)) from Scores s2 where s1.score<= s2.score) as 'rank' from Scores s1  order by s1.score desc\
\

\f2\b Problem 2 Exchange Seats\
\

\f1\b0 #Solution 1\
# select \
#     (case\
#     when id % 2 <> 0 and id < (select max(id) from Seat) then\
#     id + 1\
#     when  id % 2 = 0   then\
#     id -1 \
#     else id\
#     end) as id , student\
# from Seat\
# order by id \
\
\
# Solution 2\
# select (\
#     case \
#     when mod(id,2) = 1 and id != Total then id+1\
#     when mod(id,2) =0 then id-1\
#     else id\
#     end \
#     ) as id\
# , student from Seat, \
# (select count(*) as Total from Seat) as t\
# order by id\
    \
# Solution 3\
select s1.id, coalesce (s2.student,s1.student) as student from Seat s1 left join Seat s2 on (s1.id+1)^1-1 = s2.id\
\
\

\f2\b Problem 3 Tree Node\

\f1\b0 \
#Solution 1\
select id, case\
when p_id is null then 'Root'\
when id in (select p_id from Tree) then 'Inner'\
else 'Leaf'\
end as type\
from Tree\
\
\
#Solution 2\
# select id, (\
#     case\
#     when p_id is null then 'Root'\
#     when id not in (select p_id from Tree where p_id is not null ) then 'Leaf'\
#     else 'Inner' #when id in (select p_id from Tree) then 'Inner' else 'Leaf'\
#     end\
# ) as type from Tree\
\

\f2\b Problem 4 Department Top 3 Salaries
\f1\b0 \
\
#Solution 1\
# with cte as (select e.name as Employee , dense_rank() over (partition by e.departmentId order by salary desc) as rnk, e.departmentId as dept, e.salary as Salary from Employee e )  \
\
# select d.name as Department, c.Employee, c.Salary  from\
# cte c\
# inner join Department d on c.dept = d.id\
# where c.rnk<=3\
\
Solution 2\
select d.name as Department, e.name as Employee, e.salary as Salary\
from Department d  join Employee e\
on d.id = e.departmentId \
where 3> ( select count( distinct e2.salary) as r from Employee e2\
where e.salary < e2.salary and e.departmentId = e2.departmentId)
\f3 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb1 \strokec4 \
}